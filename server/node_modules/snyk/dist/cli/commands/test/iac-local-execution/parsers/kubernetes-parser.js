"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MissingRequiredFieldsInKubernetesYamlError = exports.HelmFileNotSupportedError = exports.tryParsingKubernetesFile = exports.assertHelmAndThrow = void 0;
const YAML = require("js-yaml");
const errors_1 = require("../../../../../lib/errors");
const types_1 = require("../types");
const REQUIRED_K8S_FIELDS = ['apiVersion', 'kind', 'metadata'];
function assertHelmAndThrow(fileData) {
    const lines = fileData.fileContent.split(/\r\n|\r|\n/);
    lines.forEach((line) => {
        const isHelmFile = line.includes('{{') && line.includes('}}');
        if (isHelmFile) {
            throw new HelmFileNotSupportedError(fileData.filePath);
        }
    });
}
exports.assertHelmAndThrow = assertHelmAndThrow;
function tryParsingKubernetesFile(fileData) {
    let yamlDocuments;
    assertHelmAndThrow(fileData);
    try {
        yamlDocuments = YAML.safeLoadAll(fileData.fileContent);
    }
    catch (e) {
        throw new FailedToParseKubernetesYamlError(fileData.filePath);
    }
    return yamlDocuments.map((parsedYamlDocument, docId) => {
        if (REQUIRED_K8S_FIELDS.every((requiredField) => parsedYamlDocument.hasOwnProperty(requiredField))) {
            return Object.assign(Object.assign({}, fileData), { jsonContent: parsedYamlDocument, engineType: types_1.EngineType.Kubernetes, docId });
        }
        else {
            throw new MissingRequiredFieldsInKubernetesYamlError(fileData.filePath);
        }
    });
}
exports.tryParsingKubernetesFile = tryParsingKubernetesFile;
class FailedToParseKubernetesYamlError extends errors_1.CustomError {
    constructor(filename) {
        super('Failed to parse Kubernetes YAML file');
        this.code = types_1.IaCErrorCodes.FailedToParseKubernetesYamlError;
        this.userMessage = `We were unable to parse the YAML file "${filename}". Please ensure that it contains properly structured YAML`;
    }
}
class HelmFileNotSupportedError extends errors_1.CustomError {
    constructor(filename) {
        super('Failed to parse Helm file');
        this.code = types_1.IaCErrorCodes.FailedToParseHelmError;
        this.userMessage = `We were unable to parse the YAML file "${filename}" as we currently do not support scanning of Helm files. More information can be found through our documentation:\nhttps://support.snyk.io/hc/en-us/articles/360012429477-Test-your-Kubernetes-files-with-our-CLI-tool`;
    }
}
exports.HelmFileNotSupportedError = HelmFileNotSupportedError;
class MissingRequiredFieldsInKubernetesYamlError extends errors_1.CustomError {
    constructor(filename) {
        super('Failed to detect Kubernetes file, missing required fields');
        this.code = types_1.IaCErrorCodes.MissingRequiredFieldsInKubernetesYamlError;
        this.userMessage = `We were unable to detect whether the YAML file "${filename}" is a valid Kubernetes file, it is missing the following fields: 'apiVersion', 'kind', 'metadata'`;
    }
}
exports.MissingRequiredFieldsInKubernetesYamlError = MissingRequiredFieldsInKubernetesYamlError;
//# sourceMappingURL=kubernetes-parser.js.map